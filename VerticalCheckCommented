import numpy as np

class Sudoku ():
    
    Store =[]

    def __init__(self):

        self.grid = input("input sudoku numbers, plese use 0 when empty : ")
        self.grid = [int(i) for i in self.grid]

    def reshape():
        if len(Sudoku.Store) >8:
            count = 0
            g=[]
            k=[]
            l=[]

            for  i in Sudoku.Store:
                if count == 0:
                    g = i
                elif count == 3:
                    k = i
                elif count == 6:
                    l = i
                count+=1    

                if 1<count <= 3:
                    g=np.concatenate((g,i), axis=1)
                elif 4 < count <= 6:
                    k  = np.concatenate((k,i), axis=1)
                elif count > 7:
                    l =np.concatenate((l,i), axis=1)

            Sudoku.Store = np.concatenate((g,k,l), axis=0)
        else:
            print("Sudoku not complete")

class Box(Sudoku):  
    def __init__ (self,name):
        Sudoku.__init__(self)
        self.name= name
        self.options = {}
        self.grid = np.reshape(self.grid,(3,3))
        Sudoku.Store.append(self.grid)

boxes =[i for i in range(9)]
 
for i in range(9):
    boxes[i] = Box(str(i))
    
Sudoku.reshape()

#VERTICAL CHECK
xopt = [[1,2,3,4,5,6,7,8,9] for k in range(9)]

#for the first three columns:
#loop looks at first number in first row of the first box and removes that number from the full list (i.e. lst1 above) - it does the same with the second and third numbers in that row and they correspond to lists lst2 and lst3 
#it will then go to the first number of second row of first box and finally third - removing these numbers from the lst1 as well
# it then jumps to the fourth box (index = 3) since this is the box under the first one and repeats

for i in range(0,9):
    for j in range(0,9):
            #need to use try and exception because when a square is empty, the code will try and remove a 0 from the original list which would cause an error
        try:
                xopt[j].remove(Sudoku.Store[i][j])
        except(ValueError, KeyError):
            pass
print(xopt)
